{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgagliardi/Desktop/hipaa-validator/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Alert, Card, Form, Spinner } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport mammoth from 'mammoth';\nimport fileDownload from 'js-file-download';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [csvData, setCsvData] = useState(null);\n  const [alert, setAlert] = useState(null);\n  const [handlingMethod, setHandlingMethod] = useState('redact');\n  const [scanResults, setScanResults] = useState(null);\n  const [docText, setDocText] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [fileType, setFileType] = useState(null);\n  const [processedFileType, setProcessedFileType] = useState(null);\n  const [processedFileData, setProcessedFileData] = useState(null);\n  const [objectUrl, setObjectUrl] = useState(null);\n\n  // Handle file drop\n  const onDrop = async acceptedFiles => {\n    try {\n      if (acceptedFiles.length === 0) return;\n      const file = acceptedFiles[0];\n      // Reset states\n      resetStates();\n      setFile(file);\n\n      // Determine file type and set appropriate state\n      const ext = file.name.split('.').pop().toLowerCase();\n      setFileType(ext);\n\n      // If PDF, create object URL for browser viewing\n      if (ext === 'pdf') {\n        const url = URL.createObjectURL(file);\n        setObjectUrl(url);\n      }\n      await handleFilePreview(file, ext);\n    } catch (error) {\n      console.error('Error handling file:', error);\n      setAlert({\n        type: 'danger',\n        message: 'Error processing the uploaded file.'\n      });\n    }\n  };\n  const resetStates = () => {\n    setFileContent('');\n    setCsvData(null);\n    setAlert(null);\n    setScanResults(null);\n    setDocText('');\n    setProcessedFileData(null);\n    setProcessedFileType(null);\n\n    // Revoke object URL if it exists\n    if (objectUrl) {\n      URL.revokeObjectURL(objectUrl);\n      setObjectUrl(null);\n    }\n  };\n\n  // Clean up object URL when component unmounts\n  useEffect(() => {\n    return () => {\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [objectUrl]);\n  const handleFilePreview = async (file, ext) => {\n    try {\n      if (ext === 'csv') {\n        Papa.parse(file, {\n          complete: result => setCsvData(result.data),\n          header: true,\n          skipEmptyLines: true\n        });\n      } else if (['txt', 'log', 'json'].includes(ext)) {\n        const reader = new FileReader();\n        reader.onload = () => setFileContent(reader.result);\n        reader.readAsText(file);\n      } else if (ext === 'pdf') {\n        // For PDFs, we'll show it using the browser's PDF viewer\n        setAlert({\n          type: 'info',\n          message: 'PDF file uploaded. PDF content will be processed as text.'\n        });\n      } else if (['doc', 'docx'].includes(ext)) {\n        if (ext === 'docx') {\n          const reader = new FileReader();\n          reader.onload = async event => {\n            try {\n              const result = await mammoth.extractRawText({\n                arrayBuffer: event.target.result\n              });\n              setDocText(result.value);\n            } catch (error) {\n              console.error('Error processing DOCX:', error);\n              setAlert({\n                type: 'warning',\n                message: 'Document preview not available, but scanning will still work.'\n              });\n            }\n          };\n          reader.readAsArrayBuffer(file);\n        } else {\n          // DOC files can't be previewed directly\n          setAlert({\n            type: 'info',\n            message: '.doc files can be processed but not previewed.'\n          });\n        }\n      } else {\n        setAlert({\n          type: 'warning',\n          message: 'This file type is supported for scanning but preview is not available.'\n        });\n      }\n    } catch (error) {\n      console.error('Error previewing file:', error);\n      setAlert({\n        type: 'warning',\n        message: 'Preview not available, but scanning will still work.'\n      });\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'text/plain': ['.txt', '.log'],\n      'application/json': ['.json'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    },\n    multiple: false\n  });\n  const handleScan = async () => {\n    if (!file) {\n      setAlert({\n        type: 'warning',\n        message: 'Please upload a file first.'\n      });\n      return;\n    }\n    setProcessing(true);\n    setAlert(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('handlingMethod', handlingMethod);\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData);\n      if (response.status === 200 && response.data.status === 'success') {\n        setAlert({\n          type: 'success',\n          message: 'File processed successfully!'\n        });\n\n        // Store processed file data and type from response\n        const fileType = response.data.fileType || 'txt';\n        setProcessedFileType(fileType);\n\n        // Decode base64 data\n        const binaryString = atob(response.data.file);\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n\n        // Create appropriate blob based on file type\n        let contentType = getMimeType(fileType);\n        const blob = new Blob([bytes], {\n          type: contentType\n        });\n        setProcessedFileData(blob);\n\n        // For PDF files, create a new object URL for the processed PDF\n        if (fileType === 'pdf') {\n          // Revoke old URL if it exists\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n          const newObjectUrl = URL.createObjectURL(blob);\n          setObjectUrl(newObjectUrl);\n        }\n\n        // For all file types, show as text\n        const reader = new FileReader();\n        reader.onload = () => setScanResults(reader.result);\n        reader.readAsText(blob);\n      } else {\n        setAlert({\n          type: 'danger',\n          message: 'Error processing the file'\n        });\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setAlert({\n        type: 'danger',\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error scanning file. Please check the server connection.'\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const downloadProcessedFile = () => {\n    if (!processedFileData) return;\n    let fileExt = processedFileType || 'txt';\n    const fileName = `processed_${file.name.split('.')[0]}.${fileExt}`;\n    fileDownload(processedFileData, fileName);\n  };\n  const getMimeType = ext => {\n    const mimeTypes = {\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'txt': 'text/plain',\n      'log': 'text/plain',\n      'json': 'application/json',\n      'csv': 'text/csv'\n    };\n    return mimeTypes[ext] || 'text/plain';\n  };\n\n  // Browser PDF Viewer Component\n  const BrowserPDFViewer = ({\n    url\n  }) => {\n    if (!url) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No PDF to display\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 22\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-viewer-container\",\n      children: /*#__PURE__*/_jsxDEV(\"object\", {\n        data: url,\n        type: \"application/pdf\",\n        width: \"100%\",\n        height: \"600px\",\n        className: \"pdf-object\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pdf-fallback\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your browser doesn't support embedded PDFs.\", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: url,\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              className: \"pdf-download-link\",\n              children: \"Download the PDF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 15\n            }, this), \" instead.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 10,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            as: \"h4\",\n            className: \"text-center bg-primary text-white\",\n            children: \"HIPAA Document Validator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ...getRootProps(),\n              style: {\n                border: '2px dashed #007bff',\n                padding: '40px',\n                textAlign: 'center',\n                backgroundColor: '#f8f9fa',\n                borderRadius: '8px',\n                marginBottom: '20px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Drag & drop a file here, or click to select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 261,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Supported file types: CSV, TXT, LOG, JSON, PDF, DOC, DOCX\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                children: \"Upload File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this), file && /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"info\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"File selected:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this), \" \", file.name, \" (\", (file.size / (1024 * 1024)).toFixed(2), \" MB)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              className: \"mt-4 mb-4\",\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"PHI Handling Method\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"redact\",\n                      label: \"Redact - Replace PHI with [REDACTED]\",\n                      value: \"redact\",\n                      checked: handlingMethod === \"redact\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 277,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"tokenize\",\n                      label: \"Tokenize - Replace with random tokens\",\n                      value: \"tokenize\",\n                      checked: handlingMethod === \"tokenize\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 287,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 286,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"remove\",\n                      label: \"Remove - Replace with spaces\",\n                      value: \"remove\",\n                      checked: handlingMethod === \"remove\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 297,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 15\n            }, this), alert && /*#__PURE__*/_jsxDEV(Alert, {\n              variant: alert.type,\n              className: \"mt-3\",\n              children: alert.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this), fileType && /*#__PURE__*/_jsxDEV(Card, {\n              className: \"mt-4 mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n                as: \"h5\",\n                children: \"File Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [csvData && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-container\",\n                  style: {\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"table\", {\n                    className: \"table table-bordered table-striped\",\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: Object.keys(csvData[0] || {}).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: key\n                        }, key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 325,\n                          columnNumber: 77\n                        }, this))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 325,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 324,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: csvData.slice(0, 10).map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: val\n                        }, j, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 329,\n                          columnNumber: 79\n                        }, this))\n                      }, i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 329,\n                        columnNumber: 31\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 327,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 323,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 23\n                }, this), fileContent && /*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    background: '#f1f1f1',\n                    padding: '1rem',\n                    borderRadius: '5px',\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: [fileContent.substring(0, 3000), fileContent.length > 3000 && \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 23\n                }, this), docText && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"doc-preview\",\n                  children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                    style: {\n                      background: '#f1f1f1',\n                      padding: '1rem',\n                      borderRadius: '5px',\n                      maxHeight: '300px',\n                      overflowY: 'auto'\n                    },\n                    children: [docText.substring(0, 3000), docText.length > 3000 && \"...\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 23\n                }, this), fileType === 'pdf' && objectUrl && /*#__PURE__*/_jsxDEV(BrowserPDFViewer, {\n                  url: objectUrl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 354,\n                  columnNumber: 23\n                }, this), fileType === 'pdf' && !objectUrl && /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"info\",\n                  children: \"Error loading PDF preview, but the document can still be processed for PHI detection.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 358,\n                  columnNumber: 23\n                }, this), fileType === 'doc' && !docText && /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"info\",\n                  children: \"Preview not available for DOC files, but the document can be processed for PHI detection.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 364,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  className: \"w-100\",\n                  onClick: handleScan,\n                  disabled: processing,\n                  children: processing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n                      as: \"span\",\n                      animation: \"border\",\n                      size: \"sm\",\n                      role: \"status\",\n                      \"aria-hidden\": \"true\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 378,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"ms-2\",\n                      children: \"Processing...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 379,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true) : 'Scan for PHI Violations'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 370,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 369,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 17\n            }, this), scanResults && /*#__PURE__*/_jsxDEV(Card, {\n              className: \"mt-4\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n                as: \"h5\",\n                children: \"Processed Document\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [processedFileType === 'pdf' && objectUrl && /*#__PURE__*/_jsxDEV(BrowserPDFViewer, {\n                  url: objectUrl\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 23\n                }, this), (!processedFileType || processedFileType !== 'pdf' || !objectUrl) && /*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    background: '#f1f1f1',\n                    padding: '1rem',\n                    borderRadius: '5px',\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: [scanResults.substring(0, 3000), scanResults.length > 3000 && \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 392,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"success\",\n                  onClick: downloadProcessedFile,\n                  disabled: !processedFileData,\n                  children: \"Download Processed Document\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4dE1eWR5SxFKt0Az7Bdxv/i2sk8=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Button","Alert","Card","Form","Spinner","useDropzone","Papa","axios","mammoth","fileDownload","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","file","setFile","fileContent","setFileContent","csvData","setCsvData","alert","setAlert","handlingMethod","setHandlingMethod","scanResults","setScanResults","docText","setDocText","processing","setProcessing","fileType","setFileType","processedFileType","setProcessedFileType","processedFileData","setProcessedFileData","objectUrl","setObjectUrl","onDrop","acceptedFiles","length","resetStates","ext","name","split","pop","toLowerCase","url","URL","createObjectURL","handleFilePreview","error","console","type","message","revokeObjectURL","parse","complete","result","data","header","skipEmptyLines","includes","reader","FileReader","onload","readAsText","event","extractRawText","arrayBuffer","target","value","readAsArrayBuffer","getRootProps","getInputProps","accept","multiple","handleScan","formData","FormData","append","response","post","status","binaryString","atob","bytes","Uint8Array","i","charCodeAt","contentType","getMimeType","blob","Blob","newObjectUrl","_error$response","_error$response$data","downloadProcessedFile","fileExt","fileName","mimeTypes","BrowserPDFViewer","children","_jsxFileName","lineNumber","columnNumber","className","width","height","href","rel","fluid","md","Header","as","Body","style","border","padding","textAlign","backgroundColor","borderRadius","marginBottom","variant","size","toFixed","Group","Label","Check","id","label","checked","onChange","e","maxHeight","overflowY","Object","keys","map","key","slice","row","values","val","j","background","substring","Footer","onClick","disabled","animation","role","_c","$RefreshReg$"],"sources":["/Users/michaelgagliardi/Desktop/hipaa-validator/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Alert, Card, Form, Spinner } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport mammoth from 'mammoth';\nimport fileDownload from 'js-file-download';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [csvData, setCsvData] = useState(null);\n  const [alert, setAlert] = useState(null);\n  const [handlingMethod, setHandlingMethod] = useState('redact');\n  const [scanResults, setScanResults] = useState(null);\n  const [docText, setDocText] = useState('');\n  const [processing, setProcessing] = useState(false);\n  const [fileType, setFileType] = useState(null);\n  const [processedFileType, setProcessedFileType] = useState(null);\n  const [processedFileData, setProcessedFileData] = useState(null);\n  const [objectUrl, setObjectUrl] = useState(null);\n\n  // Handle file drop\n  const onDrop = async (acceptedFiles) => {\n    try {\n      if (acceptedFiles.length === 0) return;\n\n      const file = acceptedFiles[0];\n      // Reset states\n      resetStates();\n      setFile(file);\n\n      // Determine file type and set appropriate state\n      const ext = file.name.split('.').pop().toLowerCase();\n      setFileType(ext);\n\n      // If PDF, create object URL for browser viewing\n      if (ext === 'pdf') {\n        const url = URL.createObjectURL(file);\n        setObjectUrl(url);\n      }\n\n      await handleFilePreview(file, ext);\n    } catch (error) {\n      console.error('Error handling file:', error);\n      setAlert({ type: 'danger', message: 'Error processing the uploaded file.' });\n    }\n  };\n\n  const resetStates = () => {\n    setFileContent('');\n    setCsvData(null);\n    setAlert(null);\n    setScanResults(null);\n    setDocText('');\n    setProcessedFileData(null);\n    setProcessedFileType(null);\n\n    // Revoke object URL if it exists\n    if (objectUrl) {\n      URL.revokeObjectURL(objectUrl);\n      setObjectUrl(null);\n    }\n  };\n\n  // Clean up object URL when component unmounts\n  useEffect(() => {\n    return () => {\n      if (objectUrl) {\n        URL.revokeObjectURL(objectUrl);\n      }\n    };\n  }, [objectUrl]);\n\n  const handleFilePreview = async (file, ext) => {\n    try {\n      if (ext === 'csv') {\n        Papa.parse(file, {\n          complete: (result) => setCsvData(result.data),\n          header: true,\n          skipEmptyLines: true,\n        });\n      } else if (['txt', 'log', 'json'].includes(ext)) {\n        const reader = new FileReader();\n        reader.onload = () => setFileContent(reader.result);\n        reader.readAsText(file);\n      } else if (ext === 'pdf') {\n        // For PDFs, we'll show it using the browser's PDF viewer\n        setAlert({ type: 'info', message: 'PDF file uploaded. PDF content will be processed as text.' });\n      } else if (['doc', 'docx'].includes(ext)) {\n        if (ext === 'docx') {\n          const reader = new FileReader();\n          reader.onload = async (event) => {\n            try {\n              const result = await mammoth.extractRawText({\n                arrayBuffer: event.target.result\n              });\n              setDocText(result.value);\n            } catch (error) {\n              console.error('Error processing DOCX:', error);\n              setAlert({ type: 'warning', message: 'Document preview not available, but scanning will still work.' });\n            }\n          };\n          reader.readAsArrayBuffer(file);\n        } else {\n          // DOC files can't be previewed directly\n          setAlert({ type: 'info', message: '.doc files can be processed but not previewed.' });\n        }\n      } else {\n        setAlert({ type: 'warning', message: 'This file type is supported for scanning but preview is not available.' });\n      }\n    } catch (error) {\n      console.error('Error previewing file:', error);\n      setAlert({ type: 'warning', message: 'Preview not available, but scanning will still work.' });\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'text/plain': ['.txt', '.log'],\n      'application/json': ['.json'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    },\n    multiple: false,\n  });\n\n  const handleScan = async () => {\n    if (!file) {\n      setAlert({ type: 'warning', message: 'Please upload a file first.' });\n      return;\n    }\n\n    setProcessing(true);\n    setAlert(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('handlingMethod', handlingMethod);\n\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData);\n\n      if (response.status === 200 && response.data.status === 'success') {\n        setAlert({ type: 'success', message: 'File processed successfully!' });\n\n        // Store processed file data and type from response\n        const fileType = response.data.fileType || 'txt';\n        setProcessedFileType(fileType);\n\n        // Decode base64 data\n        const binaryString = atob(response.data.file);\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n\n        // Create appropriate blob based on file type\n        let contentType = getMimeType(fileType);\n        const blob = new Blob([bytes], { type: contentType });\n        setProcessedFileData(blob);\n\n        // For PDF files, create a new object URL for the processed PDF\n        if (fileType === 'pdf') {\n          // Revoke old URL if it exists\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n          const newObjectUrl = URL.createObjectURL(blob);\n          setObjectUrl(newObjectUrl);\n        }\n\n        // For all file types, show as text\n        const reader = new FileReader();\n        reader.onload = () => setScanResults(reader.result);\n        reader.readAsText(blob);\n      } else {\n        setAlert({ type: 'danger', message: 'Error processing the file' });\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setAlert({\n        type: 'danger',\n        message: error.response?.data?.message || 'Error scanning file. Please check the server connection.'\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const downloadProcessedFile = () => {\n    if (!processedFileData) return;\n\n    let fileExt = processedFileType || 'txt';\n    const fileName = `processed_${file.name.split('.')[0]}.${fileExt}`;\n\n    fileDownload(processedFileData, fileName);\n  };\n\n  const getMimeType = (ext) => {\n    const mimeTypes = {\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'txt': 'text/plain',\n      'log': 'text/plain',\n      'json': 'application/json',\n      'csv': 'text/csv'\n    };\n    return mimeTypes[ext] || 'text/plain';\n  };\n\n  // Browser PDF Viewer Component\n  const BrowserPDFViewer = ({ url }) => {\n    if (!url) return <div>No PDF to display</div>;\n\n    return (\n      <div className=\"pdf-viewer-container\">\n        <object\n          data={url}\n          type=\"application/pdf\"\n          width=\"100%\"\n          height=\"600px\"\n          className=\"pdf-object\"\n        >\n          <div className=\"pdf-fallback\">\n            <p>\n              Your browser doesn't support embedded PDFs.\n              <a href={url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"pdf-download-link\">\n                Download the PDF\n              </a> instead.\n            </p>\n          </div>\n        </object>\n      </div>\n    );\n  };\n\n  return (\n    <Container fluid className=\"p-4\">\n      <Row className=\"justify-content-center\">\n        <Col md={10}>\n          <Card>\n            <Card.Header as=\"h4\" className=\"text-center bg-primary text-white\">HIPAA Document Validator</Card.Header>\n            <Card.Body>\n              <div\n                {...getRootProps()}\n                style={{\n                  border: '2px dashed #007bff',\n                  padding: '40px',\n                  textAlign: 'center',\n                  backgroundColor: '#f8f9fa',\n                  borderRadius: '8px',\n                  marginBottom: '20px'\n                }}\n              >\n                <input {...getInputProps()} />\n                <p><strong>Drag & drop a file here, or click to select</strong></p>\n                <p><small>Supported file types: CSV, TXT, LOG, JSON, PDF, DOC, DOCX</small></p>\n                <Button variant=\"primary\">Upload File</Button>\n              </div>\n\n              {file && (\n                <Alert variant=\"info\">\n                  <strong>File selected:</strong> {file.name} ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                </Alert>\n              )}\n\n              <Form className=\"mt-4 mb-4\">\n                <Form.Group>\n                  <Form.Label><strong>PHI Handling Method</strong></Form.Label>\n                  <Row>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"redact\"\n                        label=\"Redact - Replace PHI with [REDACTED]\"\n                        value=\"redact\"\n                        checked={handlingMethod === \"redact\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"tokenize\"\n                        label=\"Tokenize - Replace with random tokens\"\n                        value=\"tokenize\"\n                        checked={handlingMethod === \"tokenize\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"remove\"\n                        label=\"Remove - Replace with spaces\"\n                        value=\"remove\"\n                        checked={handlingMethod === \"remove\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                  </Row>\n                </Form.Group>\n              </Form>\n\n              {alert && (\n                <Alert variant={alert.type} className=\"mt-3\">\n                  {alert.message}\n                </Alert>\n              )}\n\n              {/* File Preview Section */}\n              {fileType && (\n                <Card className=\"mt-4 mb-4\">\n                  <Card.Header as=\"h5\">File Preview</Card.Header>\n                  <Card.Body>\n                    {csvData && (\n                      <div className=\"preview-container\" style={{ maxHeight: '300px', overflowY: 'auto' }}>\n                        <table className=\"table table-bordered table-striped\">\n                          <thead>\n                            <tr>{Object.keys(csvData[0] || {}).map((key) => <th key={key}>{key}</th>)}</tr>\n                          </thead>\n                          <tbody>\n                            {csvData.slice(0, 10).map((row, i) => (\n                              <tr key={i}>{Object.values(row).map((val, j) => <td key={j}>{val}</td>)}</tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n\n                    {fileContent && (\n                      <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                        {fileContent.substring(0, 3000)}\n                        {fileContent.length > 3000 && \"...\"}\n                      </pre>\n                    )}\n\n                    {docText && (\n                      <div className=\"doc-preview\">\n                        <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                          {docText.substring(0, 3000)}\n                          {docText.length > 3000 && \"...\"}\n                        </pre>\n                      </div>\n                    )}\n\n                    {/* PDF Preview using Browser's PDF Viewer */}\n                    {fileType === 'pdf' && objectUrl && (\n                      <BrowserPDFViewer url={objectUrl} />\n                    )}\n\n                    {fileType === 'pdf' && !objectUrl && (\n                      <Alert variant=\"info\">\n                        Error loading PDF preview, but the document can still be processed for PHI detection.\n                      </Alert>\n                    )}\n\n                    {fileType === 'doc' && !docText && (\n                      <Alert variant=\"info\">\n                        Preview not available for DOC files, but the document can be processed for PHI detection.\n                      </Alert>\n                    )}\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      variant=\"primary\"\n                      className=\"w-100\"\n                      onClick={handleScan}\n                      disabled={processing}\n                    >\n                      {processing ?\n                        <>\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                          <span className=\"ms-2\">Processing...</span>\n                        </> :\n                        'Scan for PHI Violations'\n                      }\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              )}\n\n              {/* Results Section */}\n              {scanResults && (\n                <Card className=\"mt-4\">\n                  <Card.Header as=\"h5\">Processed Document</Card.Header>\n                  <Card.Body>\n                    {/* For processed PDFs, show PDF viewer */}\n                    {processedFileType === 'pdf' && objectUrl && (\n                      <BrowserPDFViewer url={objectUrl} />\n                    )}\n\n                    {/* For text-based files, show content preview */}\n                    {(!processedFileType || processedFileType !== 'pdf' || !objectUrl) && (\n                      <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                        {scanResults.substring(0, 3000)}\n                        {scanResults.length > 3000 && \"...\"}\n                      </pre>\n                    )}\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      variant=\"success\"\n                      onClick={downloadProcessedFile}\n                      disabled={!processedFileData}\n                    >\n                      Download Processed Document\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}