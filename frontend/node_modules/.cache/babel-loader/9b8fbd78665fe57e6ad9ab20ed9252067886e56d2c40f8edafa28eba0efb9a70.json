{"ast":null,"code":"var _jsxFileName = \"/Users/michaelgagliardi/Desktop/hipaa-validator/frontend/src/App.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Alert, Card, Form, Spinner } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport mammoth from 'mammoth';\nimport fileDownload from 'js-file-download';\n\n// Set up PDF.js worker\n// Using a specific version that's known to exist on CDN\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js`;\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [file, setFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [csvData, setCsvData] = useState(null);\n  const [alert, setAlert] = useState(null);\n  const [handlingMethod, setHandlingMethod] = useState('redact');\n  const [scanResults, setScanResults] = useState(null);\n  const [pdfFile, setPdfFile] = useState(null);\n  const [docText, setDocText] = useState('');\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [processing, setProcessing] = useState(false);\n  const [fileType, setFileType] = useState(null);\n  const [processedFileType, setProcessedFileType] = useState(null);\n  const [processedFileData, setProcessedFileData] = useState(null);\n\n  // Handle file drop\n  const onDrop = async acceptedFiles => {\n    try {\n      if (acceptedFiles.length === 0) return;\n      const file = acceptedFiles[0];\n      // Reset states\n      resetStates();\n      setFile(file);\n\n      // Determine file type and set appropriate state\n      const ext = file.name.split('.').pop().toLowerCase();\n      setFileType(ext);\n      await handleFilePreview(file, ext);\n    } catch (error) {\n      console.error('Error handling file:', error);\n      setAlert({\n        type: 'danger',\n        message: 'Error processing the uploaded file.'\n      });\n    }\n  };\n  const resetStates = () => {\n    setFileContent('');\n    setCsvData(null);\n    setAlert(null);\n    setScanResults(null);\n    setPdfFile(null);\n    setDocText('');\n    setNumPages(null);\n    setPageNumber(1);\n    setProcessedFileData(null);\n    setProcessedFileType(null);\n  };\n  const handleFilePreview = async (file, ext) => {\n    try {\n      if (ext === 'csv') {\n        Papa.parse(file, {\n          complete: result => setCsvData(result.data),\n          header: true,\n          skipEmptyLines: true\n        });\n      } else if (['txt', 'log', 'json'].includes(ext)) {\n        const reader = new FileReader();\n        reader.onload = () => setFileContent(reader.result);\n        reader.readAsText(file);\n      } else if (ext === 'pdf') {\n        setPdfFile(URL.createObjectURL(file));\n      } else if (['doc', 'docx'].includes(ext)) {\n        if (ext === 'docx') {\n          const reader = new FileReader();\n          reader.onload = async event => {\n            try {\n              const result = await mammoth.extractRawText({\n                arrayBuffer: event.target.result\n              });\n              setDocText(result.value);\n            } catch (error) {\n              console.error('Error processing DOCX:', error);\n              setAlert({\n                type: 'warning',\n                message: 'Document preview not available, but scanning will still work.'\n              });\n            }\n          };\n          reader.readAsArrayBuffer(file);\n        } else {\n          // DOC files can't be previewed directly\n          setAlert({\n            type: 'info',\n            message: '.doc files can be processed but not previewed.'\n          });\n        }\n      } else {\n        setAlert({\n          type: 'warning',\n          message: 'This file type is supported for scanning but preview is not available.'\n        });\n      }\n    } catch (error) {\n      console.error('Error previewing file:', error);\n      setAlert({\n        type: 'warning',\n        message: 'Preview not available, but scanning will still work.'\n      });\n    }\n  };\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'text/plain': ['.txt', '.log'],\n      'application/json': ['.json'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    },\n    multiple: false\n  });\n  const handleScan = async () => {\n    if (!file) {\n      setAlert({\n        type: 'warning',\n        message: 'Please upload a file first.'\n      });\n      return;\n    }\n    setProcessing(true);\n    setAlert(null);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('handlingMethod', handlingMethod);\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData);\n      if (response.status === 200 && response.data.status === 'success') {\n        setAlert({\n          type: 'success',\n          message: 'File processed successfully!'\n        });\n\n        // Store processed file data and type from response\n        const fileType = response.data.fileType || file.name.split('.').pop().toLowerCase();\n        setProcessedFileType(fileType);\n\n        // Decode base64 data\n        const binaryString = atob(response.data.file);\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n\n        // Create appropriate blob based on file type\n        let contentType = getMimeType(fileType);\n        const blob = new Blob([bytes], {\n          type: contentType\n        });\n        setProcessedFileData(blob);\n\n        // Handle preview based on file type\n        if (fileType === 'pdf') {\n          // For PDFs, create object URL for PDF viewer\n          const url = URL.createObjectURL(blob);\n          setPdfFile(url);\n          setScanResults(null);\n        } else {\n          // For text-based files, show content\n          const reader = new FileReader();\n          reader.onload = () => setScanResults(reader.result);\n          reader.readAsText(blob);\n        }\n      } else {\n        setAlert({\n          type: 'danger',\n          message: 'Error processing the file'\n        });\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error uploading file:', error);\n      setAlert({\n        type: 'danger',\n        message: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Error scanning file. Please check the server connection.'\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n  const PDFViewer = ({\n    pdfFile,\n    onLoadSuccess\n  }) => {\n    _s();\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const handleLoadSuccess = ({\n      numPages\n    }) => {\n      setNumPages(numPages);\n      setErrorMessage(null);\n      if (onLoadSuccess) {\n        onLoadSuccess({\n          numPages\n        });\n      }\n    };\n    const handleLoadError = error => {\n      console.error('Error loading PDF:', error);\n      setErrorMessage('Could not load PDF file. The file may be corrupted or in an unsupported format.');\n    };\n    const goToPreviousPage = () => {\n      if (pageNumber > 1) {\n        setPageNumber(pageNumber - 1);\n      }\n    };\n    const goToNextPage = () => {\n      if (pageNumber < numPages) {\n        setPageNumber(pageNumber + 1);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-container\",\n      style: {\n        textAlign: 'center'\n      },\n      children: errorMessage ? /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"danger\",\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Document, {\n          file: pdfFile,\n          onLoadSuccess: handleLoadSuccess,\n          onLoadError: handleLoadError,\n          loading: /*#__PURE__*/_jsxDEV(Spinner, {\n            animation: \"border\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 24\n          }, this),\n          children: /*#__PURE__*/_jsxDEV(Page, {\n            pageNumber: pageNumber,\n            scale: 1.0,\n            renderTextLayer: false,\n            renderAnnotationLayer: false,\n            error: /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"danger\",\n              children: \"Error loading page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 24\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), numPages && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pdf-controls mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            size: \"sm\",\n            disabled: pageNumber <= 1,\n            onClick: goToPreviousPage,\n            children: \"Previous\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"mx-2\",\n            children: [\"Page \", pageNumber, \" of \", numPages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"outline-secondary\",\n            size: \"sm\",\n            disabled: pageNumber >= numPages,\n            onClick: goToNextPage,\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this);\n  };\n  _s(PDFViewer, \"L3FJeRGPAobMRiZR0tjFKaLFlgA=\");\n  const onDocumentLoadSuccess = ({\n    numPages\n  }) => {\n    setNumPages(numPages);\n  };\n  const downloadProcessedFile = () => {\n    if (!processedFileData) return;\n\n    // Use the fileType from the processed data, defaulting to the original type if not specified\n    const fileExt = processedFileType || file.name.split('.').pop().toLowerCase();\n    const fileName = `processed_${file.name.split('.')[0]}.${fileExt}`;\n    fileDownload(processedFileData, fileName);\n  };\n  const getMimeType = ext => {\n    const mimeTypes = {\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'txt': 'text/plain',\n      'log': 'text/plain',\n      'json': 'application/json',\n      'csv': 'text/csv'\n    };\n    return mimeTypes[ext] || 'application/octet-stream';\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    className: \"p-4\",\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      className: \"justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        md: 10,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n            as: \"h4\",\n            className: \"text-center bg-primary text-white\",\n            children: \"HIPAA Document Validator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ...getRootProps(),\n              style: {\n                border: '2px dashed #007bff',\n                padding: '40px',\n                textAlign: 'center',\n                backgroundColor: '#f8f9fa',\n                borderRadius: '8px',\n                marginBottom: '20px'\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                ...getInputProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Drag & drop a file here, or click to select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: \"Supported file types: CSV, TXT, LOG, JSON, PDF, DOC, DOCX\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 20\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 306,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"primary\",\n                children: \"Upload File\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 15\n            }, this), file && /*#__PURE__*/_jsxDEV(Alert, {\n              variant: \"info\",\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"File selected:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this), \" \", file.name, \" (\", (file.size / (1024 * 1024)).toFixed(2), \" MB)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Form, {\n              className: \"mt-4 mb-4\",\n              children: /*#__PURE__*/_jsxDEV(Form.Group, {\n                children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                  children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"PHI Handling Method\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 318,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Row, {\n                  children: [/*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"redact\",\n                      label: \"Redact - Replace PHI with [REDACTED]\",\n                      value: \"redact\",\n                      checked: handlingMethod === \"redact\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"tokenize\",\n                      label: \"Tokenize - Replace with random tokens\",\n                      value: \"tokenize\",\n                      checked: handlingMethod === \"tokenize\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 331,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 330,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(Col, {\n                    md: 4,\n                    children: /*#__PURE__*/_jsxDEV(Form.Check, {\n                      type: \"radio\",\n                      id: \"remove\",\n                      label: \"Remove - Replace with spaces\",\n                      value: \"remove\",\n                      checked: handlingMethod === \"remove\",\n                      onChange: e => setHandlingMethod(e.target.value)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 341,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this), alert && /*#__PURE__*/_jsxDEV(Alert, {\n              variant: alert.type,\n              className: \"mt-3\",\n              children: alert.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this), fileType && /*#__PURE__*/_jsxDEV(Card, {\n              className: \"mt-4 mb-4\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n                as: \"h5\",\n                children: \"File Preview\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 363,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [csvData && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"preview-container\",\n                  style: {\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(\"table\", {\n                    className: \"table table-bordered table-striped\",\n                    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: Object.keys(csvData[0] || {}).map(key => /*#__PURE__*/_jsxDEV(\"th\", {\n                          children: key\n                        }, key, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 369,\n                          columnNumber: 77\n                        }, this))\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 369,\n                        columnNumber: 29\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                      children: csvData.slice(0, 10).map((row, i) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                        children: Object.values(row).map((val, j) => /*#__PURE__*/_jsxDEV(\"td\", {\n                          children: val\n                        }, j, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 373,\n                          columnNumber: 79\n                        }, this))\n                      }, i, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 373,\n                        columnNumber: 31\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 371,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 367,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 366,\n                  columnNumber: 23\n                }, this), fileContent && /*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    background: '#f1f1f1',\n                    padding: '1rem',\n                    borderRadius: '5px',\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: [fileContent.substring(0, 3000), fileContent.length > 3000 && \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 381,\n                  columnNumber: 23\n                }, this), pdfFile && /*#__PURE__*/_jsxDEV(PDFViewer, {\n                  pdfFile: pdfFile,\n                  onLoadSuccess: onDocumentLoadSuccess\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 23\n                }, this), docText && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"doc-preview\",\n                  children: /*#__PURE__*/_jsxDEV(\"pre\", {\n                    style: {\n                      background: '#f1f1f1',\n                      padding: '1rem',\n                      borderRadius: '5px',\n                      maxHeight: '300px',\n                      overflowY: 'auto'\n                    },\n                    children: [docText.substring(0, 3000), docText.length > 3000 && \"...\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 396,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 23\n                }, this), ['doc'].includes(fileType) && !docText && /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"info\",\n                  children: \"Preview not available for .doc files, but the document can be processed for PHI detection.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 404,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  block: true,\n                  onClick: handleScan,\n                  disabled: processing,\n                  children: processing ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n                      as: \"span\",\n                      animation: \"border\",\n                      size: \"sm\",\n                      role: \"status\",\n                      \"aria-hidden\": \"true\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 418,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"ml-2\",\n                      children: \"Processing...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 419,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true) : 'Scan for PHI Violations'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 410,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this), (scanResults || processedFileData && processedFileType) && /*#__PURE__*/_jsxDEV(Card, {\n              className: \"mt-4\",\n              children: [/*#__PURE__*/_jsxDEV(Card.Header, {\n                as: \"h5\",\n                children: \"Processed Document\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                children: [scanResults && /*#__PURE__*/_jsxDEV(\"pre\", {\n                  style: {\n                    background: '#f1f1f1',\n                    padding: '1rem',\n                    borderRadius: '5px',\n                    maxHeight: '300px',\n                    overflowY: 'auto'\n                  },\n                  children: [scanResults.substring(0, 3000), scanResults.length > 3000 && \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 434,\n                  columnNumber: 23\n                }, this), processedFileData && processedFileType === 'pdf' && !scanResults && /*#__PURE__*/_jsxDEV(PDFViewer, {\n                  pdfFile: pdfFile,\n                  onLoadSuccess: onDocumentLoadSuccess\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 23\n                }, this), processedFileData && ['doc', 'docx'].includes(processedFileType) && !scanResults && /*#__PURE__*/_jsxDEV(Alert, {\n                  variant: \"info\",\n                  children: \"Word document processing complete. Please download to view.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 432,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Footer, {\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"success\",\n                  onClick: downloadProcessedFile,\n                  disabled: !processedFileData,\n                  children: \"Download Processed Document\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 453,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"Vwixas+mCgGiS3fEfq1Wk88RTT0=\", false, function () {\n  return [useDropzone];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Row","Col","Button","Alert","Card","Form","Spinner","useDropzone","Papa","axios","Document","Page","pdfjs","mammoth","fileDownload","jsxDEV","_jsxDEV","Fragment","_Fragment","GlobalWorkerOptions","workerSrc","App","_s2","_s","$RefreshSig$","file","setFile","fileContent","setFileContent","csvData","setCsvData","alert","setAlert","handlingMethod","setHandlingMethod","scanResults","setScanResults","pdfFile","setPdfFile","docText","setDocText","numPages","setNumPages","pageNumber","setPageNumber","processing","setProcessing","fileType","setFileType","processedFileType","setProcessedFileType","processedFileData","setProcessedFileData","onDrop","acceptedFiles","length","resetStates","ext","name","split","pop","toLowerCase","handleFilePreview","error","console","type","message","parse","complete","result","data","header","skipEmptyLines","includes","reader","FileReader","onload","readAsText","URL","createObjectURL","event","extractRawText","arrayBuffer","target","value","readAsArrayBuffer","getRootProps","getInputProps","accept","multiple","handleScan","formData","FormData","append","response","post","status","binaryString","atob","bytes","Uint8Array","i","charCodeAt","contentType","getMimeType","blob","Blob","url","_error$response","_error$response$data","PDFViewer","onLoadSuccess","errorMessage","setErrorMessage","handleLoadSuccess","handleLoadError","goToPreviousPage","goToNextPage","className","style","textAlign","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","onLoadError","loading","animation","scale","renderTextLayer","renderAnnotationLayer","size","disabled","onClick","onDocumentLoadSuccess","downloadProcessedFile","fileExt","mimeTypes","fluid","md","Header","as","Body","border","padding","backgroundColor","borderRadius","marginBottom","toFixed","Group","Label","Check","id","label","checked","onChange","e","maxHeight","overflowY","Object","keys","map","key","slice","row","values","val","j","background","substring","Footer","block","role","_c","$RefreshReg$"],"sources":["/Users/michaelgagliardi/Desktop/hipaa-validator/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col, Button, Alert, Card, Form, Spinner } from 'react-bootstrap';\nimport { useDropzone } from 'react-dropzone';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport mammoth from 'mammoth';\nimport fileDownload from 'js-file-download';\n\n// Set up PDF.js worker\n// Using a specific version that's known to exist on CDN\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js`;\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [fileContent, setFileContent] = useState('');\n  const [csvData, setCsvData] = useState(null);\n  const [alert, setAlert] = useState(null);\n  const [handlingMethod, setHandlingMethod] = useState('redact');\n  const [scanResults, setScanResults] = useState(null);\n  const [pdfFile, setPdfFile] = useState(null);\n  const [docText, setDocText] = useState('');\n  const [numPages, setNumPages] = useState(null);\n  const [pageNumber, setPageNumber] = useState(1);\n  const [processing, setProcessing] = useState(false);\n  const [fileType, setFileType] = useState(null);\n  const [processedFileType, setProcessedFileType] = useState(null);\n  const [processedFileData, setProcessedFileData] = useState(null);\n\n  // Handle file drop\n  const onDrop = async (acceptedFiles) => {\n    try {\n      if (acceptedFiles.length === 0) return;\n\n      const file = acceptedFiles[0];\n      // Reset states\n      resetStates();\n      setFile(file);\n\n      // Determine file type and set appropriate state\n      const ext = file.name.split('.').pop().toLowerCase();\n      setFileType(ext);\n\n      await handleFilePreview(file, ext);\n    } catch (error) {\n      console.error('Error handling file:', error);\n      setAlert({ type: 'danger', message: 'Error processing the uploaded file.' });\n    }\n  };\n\n  const resetStates = () => {\n    setFileContent('');\n    setCsvData(null);\n    setAlert(null);\n    setScanResults(null);\n    setPdfFile(null);\n    setDocText('');\n    setNumPages(null);\n    setPageNumber(1);\n    setProcessedFileData(null);\n    setProcessedFileType(null);\n  };\n\n  const handleFilePreview = async (file, ext) => {\n    try {\n      if (ext === 'csv') {\n        Papa.parse(file, {\n          complete: (result) => setCsvData(result.data),\n          header: true,\n          skipEmptyLines: true,\n        });\n      } else if (['txt', 'log', 'json'].includes(ext)) {\n        const reader = new FileReader();\n        reader.onload = () => setFileContent(reader.result);\n        reader.readAsText(file);\n      } else if (ext === 'pdf') {\n        setPdfFile(URL.createObjectURL(file));\n      } else if (['doc', 'docx'].includes(ext)) {\n        if (ext === 'docx') {\n          const reader = new FileReader();\n          reader.onload = async (event) => {\n            try {\n              const result = await mammoth.extractRawText({\n                arrayBuffer: event.target.result\n              });\n              setDocText(result.value);\n            } catch (error) {\n              console.error('Error processing DOCX:', error);\n              setAlert({ type: 'warning', message: 'Document preview not available, but scanning will still work.' });\n            }\n          };\n          reader.readAsArrayBuffer(file);\n        } else {\n          // DOC files can't be previewed directly\n          setAlert({ type: 'info', message: '.doc files can be processed but not previewed.' });\n        }\n      } else {\n        setAlert({ type: 'warning', message: 'This file type is supported for scanning but preview is not available.' });\n      }\n    } catch (error) {\n      console.error('Error previewing file:', error);\n      setAlert({ type: 'warning', message: 'Preview not available, but scanning will still work.' });\n    }\n  };\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n      'text/plain': ['.txt', '.log'],\n      'application/json': ['.json'],\n      'application/pdf': ['.pdf'],\n      'application/msword': ['.doc'],\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']\n    },\n    multiple: false,\n  });\n\n  const handleScan = async () => {\n    if (!file) {\n      setAlert({ type: 'warning', message: 'Please upload a file first.' });\n      return;\n    }\n\n    setProcessing(true);\n    setAlert(null);\n\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('handlingMethod', handlingMethod);\n\n      const response = await axios.post('http://127.0.0.1:5000/upload', formData);\n\n      if (response.status === 200 && response.data.status === 'success') {\n        setAlert({ type: 'success', message: 'File processed successfully!' });\n\n        // Store processed file data and type from response\n        const fileType = response.data.fileType || file.name.split('.').pop().toLowerCase();\n        setProcessedFileType(fileType);\n\n        // Decode base64 data\n        const binaryString = atob(response.data.file);\n        const bytes = new Uint8Array(binaryString.length);\n        for (let i = 0; i < binaryString.length; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n\n        // Create appropriate blob based on file type\n        let contentType = getMimeType(fileType);\n        const blob = new Blob([bytes], { type: contentType });\n        setProcessedFileData(blob);\n\n        // Handle preview based on file type\n        if (fileType === 'pdf') {\n          // For PDFs, create object URL for PDF viewer\n          const url = URL.createObjectURL(blob);\n          setPdfFile(url);\n          setScanResults(null);\n        } else {\n          // For text-based files, show content\n          const reader = new FileReader();\n          reader.onload = () => setScanResults(reader.result);\n          reader.readAsText(blob);\n        }\n      } else {\n        setAlert({ type: 'danger', message: 'Error processing the file' });\n      }\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      setAlert({\n        type: 'danger',\n        message: error.response?.data?.message || 'Error scanning file. Please check the server connection.'\n      });\n    } finally {\n      setProcessing(false);\n    }\n  };\n\n  const PDFViewer = ({ pdfFile, onLoadSuccess }) => {\n    const [numPages, setNumPages] = useState(null);\n    const [pageNumber, setPageNumber] = useState(1);\n    const [errorMessage, setErrorMessage] = useState(null);\n\n    const handleLoadSuccess = ({ numPages }) => {\n      setNumPages(numPages);\n      setErrorMessage(null);\n      if (onLoadSuccess) {\n        onLoadSuccess({ numPages });\n      }\n    };\n\n    const handleLoadError = (error) => {\n      console.error('Error loading PDF:', error);\n      setErrorMessage('Could not load PDF file. The file may be corrupted or in an unsupported format.');\n    };\n\n    const goToPreviousPage = () => {\n      if (pageNumber > 1) {\n        setPageNumber(pageNumber - 1);\n      }\n    };\n\n    const goToNextPage = () => {\n      if (pageNumber < numPages) {\n        setPageNumber(pageNumber + 1);\n      }\n    };\n\n    return (\n      <div className=\"pdf-container\" style={{ textAlign: 'center' }}>\n        {errorMessage ? (\n          <Alert variant=\"danger\">{errorMessage}</Alert>\n        ) : (\n          <>\n            <Document\n              file={pdfFile}\n              onLoadSuccess={handleLoadSuccess}\n              onLoadError={handleLoadError}\n              loading={<Spinner animation=\"border\" />}\n            >\n              <Page\n                pageNumber={pageNumber}\n                scale={1.0}\n                renderTextLayer={false}\n                renderAnnotationLayer={false}\n                error={<Alert variant=\"danger\">Error loading page</Alert>}\n              />\n            </Document>\n            {numPages && (\n              <div className=\"pdf-controls mt-2\">\n                <Button\n                  variant=\"outline-secondary\"\n                  size=\"sm\"\n                  disabled={pageNumber <= 1}\n                  onClick={goToPreviousPage}\n                >\n                  Previous\n                </Button>\n                <span className=\"mx-2\">\n                  Page {pageNumber} of {numPages}\n                </span>\n                <Button\n                  variant=\"outline-secondary\"\n                  size=\"sm\"\n                  disabled={pageNumber >= numPages}\n                  onClick={goToNextPage}\n                >\n                  Next\n                </Button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    );\n  };\n\n  const onDocumentLoadSuccess = ({ numPages }) => {\n    setNumPages(numPages);\n  };\n\n  const downloadProcessedFile = () => {\n    if (!processedFileData) return;\n\n    // Use the fileType from the processed data, defaulting to the original type if not specified\n    const fileExt = processedFileType || file.name.split('.').pop().toLowerCase();\n    const fileName = `processed_${file.name.split('.')[0]}.${fileExt}`;\n\n    fileDownload(processedFileData, fileName);\n  };\n\n  const getMimeType = (ext) => {\n    const mimeTypes = {\n      'pdf': 'application/pdf',\n      'doc': 'application/msword',\n      'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n      'txt': 'text/plain',\n      'log': 'text/plain',\n      'json': 'application/json',\n      'csv': 'text/csv'\n    };\n    return mimeTypes[ext] || 'application/octet-stream';\n  };\n\n  return (\n    <Container fluid className=\"p-4\">\n      <Row className=\"justify-content-center\">\n        <Col md={10}>\n          <Card>\n            <Card.Header as=\"h4\" className=\"text-center bg-primary text-white\">HIPAA Document Validator</Card.Header>\n            <Card.Body>\n              <div\n                {...getRootProps()}\n                style={{\n                  border: '2px dashed #007bff',\n                  padding: '40px',\n                  textAlign: 'center',\n                  backgroundColor: '#f8f9fa',\n                  borderRadius: '8px',\n                  marginBottom: '20px'\n                }}\n              >\n                <input {...getInputProps()} />\n                <p><strong>Drag & drop a file here, or click to select</strong></p>\n                <p><small>Supported file types: CSV, TXT, LOG, JSON, PDF, DOC, DOCX</small></p>\n                <Button variant=\"primary\">Upload File</Button>\n              </div>\n\n              {file && (\n                <Alert variant=\"info\">\n                  <strong>File selected:</strong> {file.name} ({(file.size / (1024 * 1024)).toFixed(2)} MB)\n                </Alert>\n              )}\n\n              <Form className=\"mt-4 mb-4\">\n                <Form.Group>\n                  <Form.Label><strong>PHI Handling Method</strong></Form.Label>\n                  <Row>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"redact\"\n                        label=\"Redact - Replace PHI with [REDACTED]\"\n                        value=\"redact\"\n                        checked={handlingMethod === \"redact\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"tokenize\"\n                        label=\"Tokenize - Replace with random tokens\"\n                        value=\"tokenize\"\n                        checked={handlingMethod === \"tokenize\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                    <Col md={4}>\n                      <Form.Check\n                        type=\"radio\"\n                        id=\"remove\"\n                        label=\"Remove - Replace with spaces\"\n                        value=\"remove\"\n                        checked={handlingMethod === \"remove\"}\n                        onChange={(e) => setHandlingMethod(e.target.value)}\n                      />\n                    </Col>\n                  </Row>\n                </Form.Group>\n              </Form>\n\n              {alert && (\n                <Alert variant={alert.type} className=\"mt-3\">\n                  {alert.message}\n                </Alert>\n              )}\n\n              {/* File Preview Section */}\n              {fileType && (\n                <Card className=\"mt-4 mb-4\">\n                  <Card.Header as=\"h5\">File Preview</Card.Header>\n                  <Card.Body>\n                    {csvData && (\n                      <div className=\"preview-container\" style={{ maxHeight: '300px', overflowY: 'auto' }}>\n                        <table className=\"table table-bordered table-striped\">\n                          <thead>\n                            <tr>{Object.keys(csvData[0] || {}).map((key) => <th key={key}>{key}</th>)}</tr>\n                          </thead>\n                          <tbody>\n                            {csvData.slice(0, 10).map((row, i) => (\n                              <tr key={i}>{Object.values(row).map((val, j) => <td key={j}>{val}</td>)}</tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    )}\n\n                    {fileContent && (\n                      <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                        {fileContent.substring(0, 3000)}\n                        {fileContent.length > 3000 && \"...\"}\n                      </pre>\n                    )}\n\n                    {pdfFile && (\n                      <PDFViewer\n                        pdfFile={pdfFile}\n                        onLoadSuccess={onDocumentLoadSuccess}\n                      />\n                    )}\n\n                    {docText && (\n                      <div className=\"doc-preview\">\n                        <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                          {docText.substring(0, 3000)}\n                          {docText.length > 3000 && \"...\"}\n                        </pre>\n                      </div>\n                    )}\n\n                    {['doc'].includes(fileType) && !docText && (\n                      <Alert variant=\"info\">\n                        Preview not available for .doc files, but the document can be processed for PHI detection.\n                      </Alert>\n                    )}\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      variant=\"primary\"\n                      block\n                      onClick={handleScan}\n                      disabled={processing}\n                    >\n                      {processing ?\n                        <>\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\n                          <span className=\"ml-2\">Processing...</span>\n                        </> :\n                        'Scan for PHI Violations'\n                      }\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              )}\n\n              {/* Results Section */}\n              {(scanResults || (processedFileData && processedFileType)) && (\n                <Card className=\"mt-4\">\n                  <Card.Header as=\"h5\">Processed Document</Card.Header>\n                  <Card.Body>\n                    {scanResults && (\n                      <pre style={{ background: '#f1f1f1', padding: '1rem', borderRadius: '5px', maxHeight: '300px', overflowY: 'auto' }}>\n                        {scanResults.substring(0, 3000)}\n                        {scanResults.length > 3000 && \"...\"}\n                      </pre>\n                    )}\n\n                    {processedFileData && processedFileType === 'pdf' && !scanResults && (\n                      <PDFViewer\n                        pdfFile={pdfFile}\n                        onLoadSuccess={onDocumentLoadSuccess}\n                      />\n                    )}\n\n                    {processedFileData && ['doc', 'docx'].includes(processedFileType) && !scanResults && (\n                      <Alert variant=\"info\">\n                        Word document processing complete. Please download to view.\n                      </Alert>\n                    )}\n                  </Card.Body>\n                  <Card.Footer>\n                    <Button\n                      variant=\"success\"\n                      onClick={downloadProcessedFile}\n                      disabled={!processedFileData}\n                    >\n                      Download Processed Document\n                    </Button>\n                  </Card.Footer>\n                </Card>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,IAAI,EAAEC,OAAO,QAAQ,iBAAiB;AACzF,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,IAAI,EAAEC,KAAK,QAAQ,WAAW;AACjD,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,YAAY,MAAM,kBAAkB;;AAE3C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACAN,KAAK,CAACO,mBAAmB,CAACC,SAAS,GAAG,mEAAmE;AAEzG,SAASC,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC8B,WAAW,EAAEC,cAAc,CAAC,GAAG/B,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkC,KAAK,EAAEC,QAAQ,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACoC,cAAc,EAAEC,iBAAiB,CAAC,GAAGrC,QAAQ,CAAC,QAAQ,CAAC;EAC9D,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACwC,OAAO,EAAEC,UAAU,CAAC,GAAGzC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAAC0C,OAAO,EAAEC,UAAU,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAAC4C,QAAQ,EAAEC,WAAW,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAAC8C,UAAU,EAAEC,aAAa,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACgD,UAAU,EAAEC,aAAa,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACkD,QAAQ,EAAEC,WAAW,CAAC,GAAGnD,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACoD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrD,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACsD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGvD,QAAQ,CAAC,IAAI,CAAC;;EAEhE;EACA,MAAMwD,MAAM,GAAG,MAAOC,aAAa,IAAK;IACtC,IAAI;MACF,IAAIA,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;MAEhC,MAAM9B,IAAI,GAAG6B,aAAa,CAAC,CAAC,CAAC;MAC7B;MACAE,WAAW,CAAC,CAAC;MACb9B,OAAO,CAACD,IAAI,CAAC;;MAEb;MACA,MAAMgC,GAAG,GAAGhC,IAAI,CAACiC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACpDb,WAAW,CAACS,GAAG,CAAC;MAEhB,MAAMK,iBAAiB,CAACrC,IAAI,EAAEgC,GAAG,CAAC;IACpC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C/B,QAAQ,CAAC;QAAEiC,IAAI,EAAE,QAAQ;QAAEC,OAAO,EAAE;MAAsC,CAAC,CAAC;IAC9E;EACF,CAAC;EAED,MAAMV,WAAW,GAAGA,CAAA,KAAM;IACxB5B,cAAc,CAAC,EAAE,CAAC;IAClBE,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACdI,cAAc,CAAC,IAAI,CAAC;IACpBE,UAAU,CAAC,IAAI,CAAC;IAChBE,UAAU,CAAC,EAAE,CAAC;IACdE,WAAW,CAAC,IAAI,CAAC;IACjBE,aAAa,CAAC,CAAC,CAAC;IAChBQ,oBAAoB,CAAC,IAAI,CAAC;IAC1BF,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAMY,iBAAiB,GAAG,MAAAA,CAAOrC,IAAI,EAAEgC,GAAG,KAAK;IAC7C,IAAI;MACF,IAAIA,GAAG,KAAK,KAAK,EAAE;QACjBjD,IAAI,CAAC2D,KAAK,CAAC1C,IAAI,EAAE;UACf2C,QAAQ,EAAGC,MAAM,IAAKvC,UAAU,CAACuC,MAAM,CAACC,IAAI,CAAC;UAC7CC,MAAM,EAAE,IAAI;UACZC,cAAc,EAAE;QAClB,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAACC,QAAQ,CAAChB,GAAG,CAAC,EAAE;QAC/C,MAAMiB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAM,GAAG,MAAMhD,cAAc,CAAC8C,MAAM,CAACL,MAAM,CAAC;QACnDK,MAAM,CAACG,UAAU,CAACpD,IAAI,CAAC;MACzB,CAAC,MAAM,IAAIgC,GAAG,KAAK,KAAK,EAAE;QACxBnB,UAAU,CAACwC,GAAG,CAACC,eAAe,CAACtD,IAAI,CAAC,CAAC;MACvC,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACgD,QAAQ,CAAChB,GAAG,CAAC,EAAE;QACxC,IAAIA,GAAG,KAAK,MAAM,EAAE;UAClB,MAAMiB,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,MAAM,GAAG,MAAOI,KAAK,IAAK;YAC/B,IAAI;cACF,MAAMX,MAAM,GAAG,MAAMxD,OAAO,CAACoE,cAAc,CAAC;gBAC1CC,WAAW,EAAEF,KAAK,CAACG,MAAM,CAACd;cAC5B,CAAC,CAAC;cACF7B,UAAU,CAAC6B,MAAM,CAACe,KAAK,CAAC;YAC1B,CAAC,CAAC,OAAOrB,KAAK,EAAE;cACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;cAC9C/B,QAAQ,CAAC;gBAAEiC,IAAI,EAAE,SAAS;gBAAEC,OAAO,EAAE;cAAgE,CAAC,CAAC;YACzG;UACF,CAAC;UACDQ,MAAM,CAACW,iBAAiB,CAAC5D,IAAI,CAAC;QAChC,CAAC,MAAM;UACL;UACAO,QAAQ,CAAC;YAAEiC,IAAI,EAAE,MAAM;YAAEC,OAAO,EAAE;UAAiD,CAAC,CAAC;QACvF;MACF,CAAC,MAAM;QACLlC,QAAQ,CAAC;UAAEiC,IAAI,EAAE,SAAS;UAAEC,OAAO,EAAE;QAAyE,CAAC,CAAC;MAClH;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C/B,QAAQ,CAAC;QAAEiC,IAAI,EAAE,SAAS;QAAEC,OAAO,EAAE;MAAuD,CAAC,CAAC;IAChG;EACF,CAAC;EAED,MAAM;IAAEoB,YAAY;IAAEC;EAAc,CAAC,GAAGhF,WAAW,CAAC;IAClD8C,MAAM;IACNmC,MAAM,EAAE;MACN,UAAU,EAAE,CAAC,MAAM,CAAC;MACpB,YAAY,EAAE,CAAC,MAAM,EAAE,MAAM,CAAC;MAC9B,kBAAkB,EAAE,CAAC,OAAO,CAAC;MAC7B,iBAAiB,EAAE,CAAC,MAAM,CAAC;MAC3B,oBAAoB,EAAE,CAAC,MAAM,CAAC;MAC9B,yEAAyE,EAAE,CAAC,OAAO;IACrF,CAAC;IACDC,QAAQ,EAAE;EACZ,CAAC,CAAC;EAEF,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI,CAACjE,IAAI,EAAE;MACTO,QAAQ,CAAC;QAAEiC,IAAI,EAAE,SAAS;QAAEC,OAAO,EAAE;MAA8B,CAAC,CAAC;MACrE;IACF;IAEApB,aAAa,CAAC,IAAI,CAAC;IACnBd,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAM2D,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEpE,IAAI,CAAC;MAC7BkE,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAE5D,cAAc,CAAC;MAEjD,MAAM6D,QAAQ,GAAG,MAAMrF,KAAK,CAACsF,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,CAAC;MAE3E,IAAIG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAIF,QAAQ,CAACxB,IAAI,CAAC0B,MAAM,KAAK,SAAS,EAAE;QACjEhE,QAAQ,CAAC;UAAEiC,IAAI,EAAE,SAAS;UAAEC,OAAO,EAAE;QAA+B,CAAC,CAAC;;QAEtE;QACA,MAAMnB,QAAQ,GAAG+C,QAAQ,CAACxB,IAAI,CAACvB,QAAQ,IAAItB,IAAI,CAACiC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnFX,oBAAoB,CAACH,QAAQ,CAAC;;QAE9B;QACA,MAAMkD,YAAY,GAAGC,IAAI,CAACJ,QAAQ,CAACxB,IAAI,CAAC7C,IAAI,CAAC;QAC7C,MAAM0E,KAAK,GAAG,IAAIC,UAAU,CAACH,YAAY,CAAC1C,MAAM,CAAC;QACjD,KAAK,IAAI8C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,YAAY,CAAC1C,MAAM,EAAE8C,CAAC,EAAE,EAAE;UAC5CF,KAAK,CAACE,CAAC,CAAC,GAAGJ,YAAY,CAACK,UAAU,CAACD,CAAC,CAAC;QACvC;;QAEA;QACA,IAAIE,WAAW,GAAGC,WAAW,CAACzD,QAAQ,CAAC;QACvC,MAAM0D,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACP,KAAK,CAAC,EAAE;UAAElC,IAAI,EAAEsC;QAAY,CAAC,CAAC;QACrDnD,oBAAoB,CAACqD,IAAI,CAAC;;QAE1B;QACA,IAAI1D,QAAQ,KAAK,KAAK,EAAE;UACtB;UACA,MAAM4D,GAAG,GAAG7B,GAAG,CAACC,eAAe,CAAC0B,IAAI,CAAC;UACrCnE,UAAU,CAACqE,GAAG,CAAC;UACfvE,cAAc,CAAC,IAAI,CAAC;QACtB,CAAC,MAAM;UACL;UACA,MAAMsC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;UAC/BD,MAAM,CAACE,MAAM,GAAG,MAAMxC,cAAc,CAACsC,MAAM,CAACL,MAAM,CAAC;UACnDK,MAAM,CAACG,UAAU,CAAC4B,IAAI,CAAC;QACzB;MACF,CAAC,MAAM;QACLzE,QAAQ,CAAC;UAAEiC,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAA4B,CAAC,CAAC;MACpE;IACF,CAAC,CAAC,OAAOH,KAAK,EAAE;MAAA,IAAA6C,eAAA,EAAAC,oBAAA;MACd7C,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C/B,QAAQ,CAAC;QACPiC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,EAAA0C,eAAA,GAAA7C,KAAK,CAAC+B,QAAQ,cAAAc,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBtC,IAAI,cAAAuC,oBAAA,uBAApBA,oBAAA,CAAsB3C,OAAO,KAAI;MAC5C,CAAC,CAAC;IACJ,CAAC,SAAS;MACRpB,aAAa,CAAC,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMgE,SAAS,GAAGA,CAAC;IAAEzE,OAAO;IAAE0E;EAAc,CAAC,KAAK;IAAAxF,EAAA;IAChD,MAAM,CAACkB,QAAQ,EAAEC,WAAW,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;IAC9C,MAAM,CAAC8C,UAAU,EAAEC,aAAa,CAAC,GAAG/C,QAAQ,CAAC,CAAC,CAAC;IAC/C,MAAM,CAACmH,YAAY,EAAEC,eAAe,CAAC,GAAGpH,QAAQ,CAAC,IAAI,CAAC;IAEtD,MAAMqH,iBAAiB,GAAGA,CAAC;MAAEzE;IAAS,CAAC,KAAK;MAC1CC,WAAW,CAACD,QAAQ,CAAC;MACrBwE,eAAe,CAAC,IAAI,CAAC;MACrB,IAAIF,aAAa,EAAE;QACjBA,aAAa,CAAC;UAAEtE;QAAS,CAAC,CAAC;MAC7B;IACF,CAAC;IAED,MAAM0E,eAAe,GAAIpD,KAAK,IAAK;MACjCC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CkD,eAAe,CAAC,iFAAiF,CAAC;IACpG,CAAC;IAED,MAAMG,gBAAgB,GAAGA,CAAA,KAAM;MAC7B,IAAIzE,UAAU,GAAG,CAAC,EAAE;QAClBC,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;MAC/B;IACF,CAAC;IAED,MAAM0E,YAAY,GAAGA,CAAA,KAAM;MACzB,IAAI1E,UAAU,GAAGF,QAAQ,EAAE;QACzBG,aAAa,CAACD,UAAU,GAAG,CAAC,CAAC;MAC/B;IACF,CAAC;IAED,oBACE3B,OAAA;MAAKsG,SAAS,EAAC,eAAe;MAACC,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAC,QAAA,EAC3DT,YAAY,gBACXhG,OAAA,CAACb,KAAK;QAACuH,OAAO,EAAC,QAAQ;QAAAD,QAAA,EAAET;MAAY;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,gBAE9C9G,OAAA,CAAAE,SAAA;QAAAuG,QAAA,gBACEzG,OAAA,CAACN,QAAQ;UACPe,IAAI,EAAEY,OAAQ;UACd0E,aAAa,EAAEG,iBAAkB;UACjCa,WAAW,EAAEZ,eAAgB;UAC7Ba,OAAO,eAAEhH,OAAA,CAACV,OAAO;YAAC2H,SAAS,EAAC;UAAQ;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAE;UAAAL,QAAA,eAExCzG,OAAA,CAACL,IAAI;YACHgC,UAAU,EAAEA,UAAW;YACvBuF,KAAK,EAAE,GAAI;YACXC,eAAe,EAAE,KAAM;YACvBC,qBAAqB,EAAE,KAAM;YAC7BrE,KAAK,eAAE/C,OAAA,CAACb,KAAK;cAACuH,OAAO,EAAC,QAAQ;cAAAD,QAAA,EAAC;YAAkB;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC,EACVrF,QAAQ,iBACPzB,OAAA;UAAKsG,SAAS,EAAC,mBAAmB;UAAAG,QAAA,gBAChCzG,OAAA,CAACd,MAAM;YACLwH,OAAO,EAAC,mBAAmB;YAC3BW,IAAI,EAAC,IAAI;YACTC,QAAQ,EAAE3F,UAAU,IAAI,CAAE;YAC1B4F,OAAO,EAAEnB,gBAAiB;YAAAK,QAAA,EAC3B;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACT9G,OAAA;YAAMsG,SAAS,EAAC,MAAM;YAAAG,QAAA,GAAC,OAChB,EAAC9E,UAAU,EAAC,MAAI,EAACF,QAAQ;UAAA;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACP9G,OAAA,CAACd,MAAM;YACLwH,OAAO,EAAC,mBAAmB;YAC3BW,IAAI,EAAC,IAAI;YACTC,QAAQ,EAAE3F,UAAU,IAAIF,QAAS;YACjC8F,OAAO,EAAElB,YAAa;YAAAI,QAAA,EACvB;UAED;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CACN;MAAA,eACD;IACH;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;EAACvG,EAAA,CA7EIuF,SAAS;EA+Ef,MAAM0B,qBAAqB,GAAGA,CAAC;IAAE/F;EAAS,CAAC,KAAK;IAC9CC,WAAW,CAACD,QAAQ,CAAC;EACvB,CAAC;EAED,MAAMgG,qBAAqB,GAAGA,CAAA,KAAM;IAClC,IAAI,CAACtF,iBAAiB,EAAE;;IAExB;IACA,MAAMuF,OAAO,GAAGzF,iBAAiB,IAAIxB,IAAI,CAACiC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC7E,MAAM8D,QAAQ,GAAG,aAAalG,IAAI,CAACiC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI+E,OAAO,EAAE;IAElE5H,YAAY,CAACqC,iBAAiB,EAAEwE,QAAQ,CAAC;EAC3C,CAAC;EAED,MAAMnB,WAAW,GAAI/C,GAAG,IAAK;IAC3B,MAAMkF,SAAS,GAAG;MAChB,KAAK,EAAE,iBAAiB;MACxB,KAAK,EAAE,oBAAoB;MAC3B,MAAM,EAAE,yEAAyE;MACjF,KAAK,EAAE,YAAY;MACnB,KAAK,EAAE,YAAY;MACnB,MAAM,EAAE,kBAAkB;MAC1B,KAAK,EAAE;IACT,CAAC;IACD,OAAOA,SAAS,CAAClF,GAAG,CAAC,IAAI,0BAA0B;EACrD,CAAC;EAED,oBACEzC,OAAA,CAACjB,SAAS;IAAC6I,KAAK;IAACtB,SAAS,EAAC,KAAK;IAAAG,QAAA,eAC9BzG,OAAA,CAAChB,GAAG;MAACsH,SAAS,EAAC,wBAAwB;MAAAG,QAAA,eACrCzG,OAAA,CAACf,GAAG;QAAC4I,EAAE,EAAE,EAAG;QAAApB,QAAA,eACVzG,OAAA,CAACZ,IAAI;UAAAqH,QAAA,gBACHzG,OAAA,CAACZ,IAAI,CAAC0I,MAAM;YAACC,EAAE,EAAC,IAAI;YAACzB,SAAS,EAAC,mCAAmC;YAAAG,QAAA,EAAC;UAAwB;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACzG9G,OAAA,CAACZ,IAAI,CAAC4I,IAAI;YAAAvB,QAAA,gBACRzG,OAAA;cAAA,GACMsE,YAAY,CAAC,CAAC;cAClBiC,KAAK,EAAE;gBACL0B,MAAM,EAAE,oBAAoB;gBAC5BC,OAAO,EAAE,MAAM;gBACf1B,SAAS,EAAE,QAAQ;gBACnB2B,eAAe,EAAE,SAAS;gBAC1BC,YAAY,EAAE,KAAK;gBACnBC,YAAY,EAAE;cAChB,CAAE;cAAA5B,QAAA,gBAEFzG,OAAA;gBAAA,GAAWuE,aAAa,CAAC;cAAC;gBAAAoC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC9B9G,OAAA;gBAAAyG,QAAA,eAAGzG,OAAA;kBAAAyG,QAAA,EAAQ;gBAA2C;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eACnE9G,OAAA;gBAAAyG,QAAA,eAAGzG,OAAA;kBAAAyG,QAAA,EAAO;gBAAyD;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC,eAC/E9G,OAAA,CAACd,MAAM;gBAACwH,OAAO,EAAC,SAAS;gBAAAD,QAAA,EAAC;cAAW;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3C,CAAC,EAELrG,IAAI,iBACHT,OAAA,CAACb,KAAK;cAACuH,OAAO,EAAC,MAAM;cAAAD,QAAA,gBACnBzG,OAAA;gBAAAyG,QAAA,EAAQ;cAAc;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACrG,IAAI,CAACiC,IAAI,EAAC,IAAE,EAAC,CAACjC,IAAI,CAAC4G,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,EAAEiB,OAAO,CAAC,CAAC,CAAC,EAAC,MACvF;YAAA;cAAA3B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CACR,eAED9G,OAAA,CAACX,IAAI;cAACiH,SAAS,EAAC,WAAW;cAAAG,QAAA,eACzBzG,OAAA,CAACX,IAAI,CAACkJ,KAAK;gBAAA9B,QAAA,gBACTzG,OAAA,CAACX,IAAI,CAACmJ,KAAK;kBAAA/B,QAAA,eAACzG,OAAA;oBAAAyG,QAAA,EAAQ;kBAAmB;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAY,CAAC,eAC7D9G,OAAA,CAAChB,GAAG;kBAAAyH,QAAA,gBACFzG,OAAA,CAACf,GAAG;oBAAC4I,EAAE,EAAE,CAAE;oBAAApB,QAAA,eACTzG,OAAA,CAACX,IAAI,CAACoJ,KAAK;sBACTxF,IAAI,EAAC,OAAO;sBACZyF,EAAE,EAAC,QAAQ;sBACXC,KAAK,EAAC,sCAAsC;sBAC5CvE,KAAK,EAAC,QAAQ;sBACdwE,OAAO,EAAE3H,cAAc,KAAK,QAAS;sBACrC4H,QAAQ,EAAGC,CAAC,IAAK5H,iBAAiB,CAAC4H,CAAC,CAAC3E,MAAM,CAACC,KAAK;oBAAE;sBAAAuC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACpD;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC,eACN9G,OAAA,CAACf,GAAG;oBAAC4I,EAAE,EAAE,CAAE;oBAAApB,QAAA,eACTzG,OAAA,CAACX,IAAI,CAACoJ,KAAK;sBACTxF,IAAI,EAAC,OAAO;sBACZyF,EAAE,EAAC,UAAU;sBACbC,KAAK,EAAC,uCAAuC;sBAC7CvE,KAAK,EAAC,UAAU;sBAChBwE,OAAO,EAAE3H,cAAc,KAAK,UAAW;sBACvC4H,QAAQ,EAAGC,CAAC,IAAK5H,iBAAiB,CAAC4H,CAAC,CAAC3E,MAAM,CAACC,KAAK;oBAAE;sBAAAuC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACpD;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC,eACN9G,OAAA,CAACf,GAAG;oBAAC4I,EAAE,EAAE,CAAE;oBAAApB,QAAA,eACTzG,OAAA,CAACX,IAAI,CAACoJ,KAAK;sBACTxF,IAAI,EAAC,OAAO;sBACZyF,EAAE,EAAC,QAAQ;sBACXC,KAAK,EAAC,8BAA8B;sBACpCvE,KAAK,EAAC,QAAQ;sBACdwE,OAAO,EAAE3H,cAAc,KAAK,QAAS;sBACrC4H,QAAQ,EAAGC,CAAC,IAAK5H,iBAAiB,CAAC4H,CAAC,CAAC3E,MAAM,CAACC,KAAK;oBAAE;sBAAAuC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACpD;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC,EAEN/F,KAAK,iBACJf,OAAA,CAACb,KAAK;cAACuH,OAAO,EAAE3F,KAAK,CAACkC,IAAK;cAACqD,SAAS,EAAC,MAAM;cAAAG,QAAA,EACzC1F,KAAK,CAACmC;YAAO;cAAAyD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CACR,EAGA/E,QAAQ,iBACP/B,OAAA,CAACZ,IAAI;cAACkH,SAAS,EAAC,WAAW;cAAAG,QAAA,gBACzBzG,OAAA,CAACZ,IAAI,CAAC0I,MAAM;gBAACC,EAAE,EAAC,IAAI;gBAAAtB,QAAA,EAAC;cAAY;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAa,CAAC,eAC/C9G,OAAA,CAACZ,IAAI,CAAC4I,IAAI;gBAAAvB,QAAA,GACP5F,OAAO,iBACNb,OAAA;kBAAKsG,SAAS,EAAC,mBAAmB;kBAACC,KAAK,EAAE;oBAAEwC,SAAS,EAAE,OAAO;oBAAEC,SAAS,EAAE;kBAAO,CAAE;kBAAAvC,QAAA,eAClFzG,OAAA;oBAAOsG,SAAS,EAAC,oCAAoC;oBAAAG,QAAA,gBACnDzG,OAAA;sBAAAyG,QAAA,eACEzG,OAAA;wBAAAyG,QAAA,EAAKwC,MAAM,CAACC,IAAI,CAACrI,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAACsI,GAAG,CAAEC,GAAG,iBAAKpJ,OAAA;0BAAAyG,QAAA,EAAe2C;wBAAG,GAATA,GAAG;0BAAAzC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAW,CAAC;sBAAC;wBAAAH,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAK;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAC1E,CAAC,eACR9G,OAAA;sBAAAyG,QAAA,EACG5F,OAAO,CAACwI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACF,GAAG,CAAC,CAACG,GAAG,EAAEjE,CAAC,kBAC/BrF,OAAA;wBAAAyG,QAAA,EAAawC,MAAM,CAACM,MAAM,CAACD,GAAG,CAAC,CAACH,GAAG,CAAC,CAACK,GAAG,EAAEC,CAAC,kBAAKzJ,OAAA;0BAAAyG,QAAA,EAAa+C;wBAAG,GAAPC,CAAC;0BAAA9C,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA,OAAW,CAAC;sBAAC,GAA9DzB,CAAC;wBAAAsB,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAkE,CAC7E;oBAAC;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACG,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACH;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACL,CACN,EAEAnG,WAAW,iBACVX,OAAA;kBAAKuG,KAAK,EAAE;oBAAEmD,UAAU,EAAE,SAAS;oBAAExB,OAAO,EAAE,MAAM;oBAAEE,YAAY,EAAE,KAAK;oBAAEW,SAAS,EAAE,OAAO;oBAAEC,SAAS,EAAE;kBAAO,CAAE;kBAAAvC,QAAA,GAChH9F,WAAW,CAACgJ,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAC9BhJ,WAAW,CAAC4B,MAAM,GAAG,IAAI,IAAI,KAAK;gBAAA;kBAAAoE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChC,CACN,EAEAzF,OAAO,iBACNrB,OAAA,CAAC8F,SAAS;kBACRzE,OAAO,EAAEA,OAAQ;kBACjB0E,aAAa,EAAEyB;gBAAsB;kBAAAb,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtC,CACF,EAEAvF,OAAO,iBACNvB,OAAA;kBAAKsG,SAAS,EAAC,aAAa;kBAAAG,QAAA,eAC1BzG,OAAA;oBAAKuG,KAAK,EAAE;sBAAEmD,UAAU,EAAE,SAAS;sBAAExB,OAAO,EAAE,MAAM;sBAAEE,YAAY,EAAE,KAAK;sBAAEW,SAAS,EAAE,OAAO;sBAAEC,SAAS,EAAE;oBAAO,CAAE;oBAAAvC,QAAA,GAChHlF,OAAO,CAACoI,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAC1BpI,OAAO,CAACgB,MAAM,GAAG,IAAI,IAAI,KAAK;kBAAA;oBAAAoE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAC5B;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACH,CACN,EAEA,CAAC,KAAK,CAAC,CAACrD,QAAQ,CAAC1B,QAAQ,CAAC,IAAI,CAACR,OAAO,iBACrCvB,OAAA,CAACb,KAAK;kBAACuH,OAAO,EAAC,MAAM;kBAAAD,QAAA,EAAC;gBAEtB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CACR;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACQ,CAAC,eACZ9G,OAAA,CAACZ,IAAI,CAACwK,MAAM;gBAAAnD,QAAA,eACVzG,OAAA,CAACd,MAAM;kBACLwH,OAAO,EAAC,SAAS;kBACjBmD,KAAK;kBACLtC,OAAO,EAAE7C,UAAW;kBACpB4C,QAAQ,EAAEzF,UAAW;kBAAA4E,QAAA,EAEpB5E,UAAU,gBACT7B,OAAA,CAAAE,SAAA;oBAAAuG,QAAA,gBACEzG,OAAA,CAACV,OAAO;sBAACyI,EAAE,EAAC,MAAM;sBAACd,SAAS,EAAC,QAAQ;sBAACI,IAAI,EAAC,IAAI;sBAACyC,IAAI,EAAC,QAAQ;sBAAC,eAAY;oBAAM;sBAAAnD,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC,eACnF9G,OAAA;sBAAMsG,SAAS,EAAC,MAAM;sBAAAG,QAAA,EAAC;oBAAa;sBAAAE,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA,eAC3C,CAAC,GACH;gBAAyB;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAErB;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV,CACP,EAGA,CAAC3F,WAAW,IAAKgB,iBAAiB,IAAIF,iBAAkB,kBACvDjC,OAAA,CAACZ,IAAI;cAACkH,SAAS,EAAC,MAAM;cAAAG,QAAA,gBACpBzG,OAAA,CAACZ,IAAI,CAAC0I,MAAM;gBAACC,EAAE,EAAC,IAAI;gBAAAtB,QAAA,EAAC;cAAkB;gBAAAE,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAa,CAAC,eACrD9G,OAAA,CAACZ,IAAI,CAAC4I,IAAI;gBAAAvB,QAAA,GACPtF,WAAW,iBACVnB,OAAA;kBAAKuG,KAAK,EAAE;oBAAEmD,UAAU,EAAE,SAAS;oBAAExB,OAAO,EAAE,MAAM;oBAAEE,YAAY,EAAE,KAAK;oBAAEW,SAAS,EAAE,OAAO;oBAAEC,SAAS,EAAE;kBAAO,CAAE;kBAAAvC,QAAA,GAChHtF,WAAW,CAACwI,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,EAC9BxI,WAAW,CAACoB,MAAM,GAAG,IAAI,IAAI,KAAK;gBAAA;kBAAAoE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAChC,CACN,EAEA3E,iBAAiB,IAAIF,iBAAiB,KAAK,KAAK,IAAI,CAACd,WAAW,iBAC/DnB,OAAA,CAAC8F,SAAS;kBACRzE,OAAO,EAAEA,OAAQ;kBACjB0E,aAAa,EAAEyB;gBAAsB;kBAAAb,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACtC,CACF,EAEA3E,iBAAiB,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAACsB,QAAQ,CAACxB,iBAAiB,CAAC,IAAI,CAACd,WAAW,iBAC/EnB,OAAA,CAACb,KAAK;kBAACuH,OAAO,EAAC,MAAM;kBAAAD,QAAA,EAAC;gBAEtB;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CACR;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACQ,CAAC,eACZ9G,OAAA,CAACZ,IAAI,CAACwK,MAAM;gBAAAnD,QAAA,eACVzG,OAAA,CAACd,MAAM;kBACLwH,OAAO,EAAC,SAAS;kBACjBa,OAAO,EAAEE,qBAAsB;kBAC/BH,QAAQ,EAAE,CAACnF,iBAAkB;kBAAAsE,QAAA,EAC9B;gBAED;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACV,CACP;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACR;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEhB;AAACxG,GAAA,CAxcQD,GAAG;EAAA,QA4F8Bd,WAAW;AAAA;AAAAwK,EAAA,GA5F5C1J,GAAG;AA0cZ,eAAeA,GAAG;AAAC,IAAA0J,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}